<?php

define('FORMS_TRAINING_WELCOME_TITLE', 'Welcome to this Drupal Forms Training Tutorial');
define('FORMS_TRAINING_INSTRUCTIONS', '<p>In this Tutorial you will learn the skills to build and manage advanced form elements.</p>'.
  '<p>Most of the work you will need to do it (unless indicated otherwise) in the forms_training.exercise.inc file located in the forms_training module located in the /sites/all/modules path of your Drupal root</p>'.
  '<p> These are the following topics that we will cover, you can jump to any topic at any time:</p>');


/**
 * Implements hook_menu()
 */
function forms_training_menu(){
  $items['forms-training'] = array(
    'title' => 'Forms Training',
    'page callback' => '_forms_training_landing_page',
    'access callback' => TRUE, //Doesn't really matter to unrestrict access to this page
    'type' => MENU_CALLBACK
  );
  $items['forms-training/%'] = array(
    'title' => 'Forms Training - Exercise !number',
    'title arguments' => array('!number' => 1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_forms_training_form', 1),
    'access callback' => TRUE, //Doesn't really matter to unrestrict access to this page
    'type' => MENU_CALLBACK,
    'file' => 'forms_training.exercise.inc'
  );
  return $items;
}

/**
 * Page callback for the main page for this training
 */
function _forms_training_landing_page(){
  drupal_set_title('Forms Training');
  $content['welcome']['#markup'] = '<h2>'.FORMS_TRAINING_WELCOME_TITLE.'</h2>';
  $content['instructions']['#markup'] = FORMS_TRAINING_INSTRUCTIONS;
  $topics = _forms_training_get_topics();
  foreach($topics as $id => $topic){
    $items[] = l($topic, 'forms-training/'.$id);
  }
  $content['content_items']['#markup'] = theme('item_list', array(
    'items' => $items
  ));
  $content['start']['#markup'] = l('Let\'s begin', 'forms-training/0');
  return $content;
}

/**
 * Forms training main form wrapper
 */
function _forms_training_form($form, &$form_state, $number){
  $topics = _forms_training_get_topics();
  $form_state['exercise_number'] = $number;
  $form['subtitle']['#markup'] = '<h2>'.$topics[$number].'</h2>';
  $form_def_name = '_forms_training_form_'.$number;
  if(function_exists($form_def_name)){
    $form_def_name($form, $form_state);
  }
  $form_exercise_def_name = 'forms_training_exercise_'.$number.'_form';
  if(function_exists($form_exercise_def_name)){
    $form['#suffix'] = '<strong>Your exercise form goes here:</strong>'.
      '<div style="border: 2px solid #090; min-height: 10px; padding: 10px;">'.
      drupal_render(drupal_get_form($form_exercise_def_name)).'</div>';
  }
  if($number){
    $form['previous'] = array(
      '#type' => 'submit',
      '#value' => 'Previous',
      '#name' => 'previous',
      '#submit' => array('_forms_training_form_previous_submit') 
    );
  }
  $form['next'] = array(
    '#type' => 'submit',
    '#value' => 'Next',
    '#name' => 'next',
    '#submit' => array('_forms_training_form_next_submit') 
  );
  return $form;
}

/**
 * Previous submit handler for the training form
 */
function _forms_training_form_previous_submit($form, &$form_state){
  $form_state['redirect'] = 'forms-training/'.($form_state['exercise_number']-1);
}

/**
 * Next submit handler for the training form
 */
function _forms_training_form_next_submit($form, &$form_state){
  $form_state['redirect'] = 'forms-training/'.($form_state['exercise_number']+1);
}

/*** FORMS TOPICS ***/

function  _forms_training_get_topics(){
  return array(
    'Basic Concepts',
    'Validation and Submit Handlers',
    'Upload and store an image with managed_file',
    'Creating new form elements with #ajax',
    'Altering Form Elements with #ajax',
    'Create new form element types',
    'Multistep Forms',
    'Draggable Table Forms',
    'Altering Forms',
    'Use Vertical Tabs with Forms',
  );
}

/*** EXERCISE FORM DEFINITIONS ***/

/**
 * Exercise 0: Basic Concepts
 */
function _forms_training_form_0(&$form, &$form_state){
  $form['instructions']['#markup'] = '<div><p>Instructions:</p>'.
   '<p>This first exercise consists on recreate the following form to review basic concepts on creating form elements. If you need to, you can go to the Drupal <a target="_blank" href="http://api.drupal.org/api/drupal/developer!topics!forms_api_reference.html/7">Form API Reference</a></p>'.'</div>';
  $form['textfield'] = array(
    '#type' => 'textfield',
    '#title' => 'Textfield Input Sample',
    '#default_value' => 'A default value goes here'
  );
  $options = array('Option 1', 'Option 2', 'Option 3');
  $form['options'] = array(
    '#type' => 'radios',
    '#title' => 'Options Input Sample',
    '#options' => $options,
    '#default_value' => 2
  );
  $form['additional_1']['#markup'] = '<div>After creating the given form elements, try changing the options input into the following checkboxes</div>';
  $form['options_2'] = array(
    '#type' => 'checkboxes',
    '#title' => 'Checkboxes Input Sample',
    '#options' => $options,
    '#default_value' => array(1,2)
  );
}


/**
 * Exercise 1: Submit and validation handlers
 */
function _forms_training_form_1(&$form, &$form_state){
  $form['instructions']['#markup'] = '<div><p>Instructions:</p>'.
    '<p>Create a form similar to the following form (textfield and submit button) and add a validation handler that checks that the input in the checkbox has the string "Drupal Summit" (use strpos, regex or any other method you know) and submit handler that stores this into a variable named "forms_training_exercise_1_val". The content of the variable should display below once set:</p>';
  $form['variable_val']['#markup'] = '<div><strong>Variable content:</strong> <span style="color: #090">'.variable_get('forms_training_exercise_1_val', '').'</span></div>';
  $form['exercise_1'] = array(
    '#type' => 'textfield',
    '#title' => 'Name the event you are attending to',
    '#default_value' => '',
  );
  $form['exercise_1_submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
    '#validate' => array('_forms_training_form_1_validate'),
    '#submit' => array('_forms_training_form_1_submit'),
    '#suffix' => '<br />'
  );
}

/**
 * Exercise 1: Validation Handler
 */
function _forms_training_form_1_validate($form, &$form_state){
  if(strpos($form_state['values']['exercise_1'], 'Drupal Summit') === FALSE){
    form_error($form['exercise_1'], 'Text needs to contain "Drupal Summit"');
  }
}

/**
 * Exercise 1: Submit Handler
 */
function _forms_training_form_1_submit($form, &$form_state){
  variable_set('forms_training_exercise_1_val', $form_state['values']['exercise_1']);
}

/**
 * Exercise 2: Upload and store and image with managed file
 */
function _forms_training_form_2(&$form, &$form_state){
  $form['instructions']['#markup'] = '<div><p>Instructions:</p>'.
    '<p>Create the following form using the managed_file element and store the image fid in a variable named "forms_training_exercise_2_fid"</p>';
  
  $exercise_2_image = variable_get('forms_training_exercise_2_fid', ''); //variable stored fid in this case
  $form['exercise_2_image'] = array(
    '#title' => 'Exercise 2 Image',
    '#type' => 'managed_file',
    '#default_value' => is_numeric($exercise_2_image)?$exercise_2_image:0,
    '#upload_location' => 'public://' //could be a different schema
  );
  $form['store'] = array(
    '#type' => 'submit',
    '#value' => 'Store Image',
    '#submit' => array('_forms_training_form_2_submit')
  );
  if(!empty($exercise_2_image)){
    $vars = (array) file_load($exercise_2_image);
    $vars['path'] = $vars['uri'];
  }
  $form['stored_image']['#markup'] = '<p>Your stored image should show below:</p>'.
    '<p>'.(!empty($exercise_2_image)?theme('image', $vars):'No image stored yet').'</p>';
}

/**
 * Exercise 2: Store image submit handler
 */
function _forms_training_form_2_submit($form, &$form_state){
  $current_image_fid = variable_get('forms_training_exercise_2_fid', '');
  if(!is_null($form_state['values']['exercise_2_image'])){
    if($current_image_fid != $form_state['values']['exercise_2_image']){
      if(!empty($current_image_fid)){
        //delete current file
        $current_image_file = file_load($current_image_fid);
        file_usage_delete($current_image_file, 'forms_training');
        file_delete($current_image_file);
        variable_set('forms_training_exercise_2_fid', '');
        drupal_set_message('Image Deleted');
      }
      if($form_state['values']['exercise_2_image'] != 0){
        $image_file = file_load($form_state['values']['exercise_2_image']);
        $image_file->status = FILE_STATUS_PERMANENT;
        file_save($image_file);
        file_usage_add($image_file, 'forms_training', 'image', $image_file->fid);
        variable_set('forms_training_exercise_2_fid', 
          $form_state['values']['exercise_2_image']);
        drupal_set_message('Image Stored');
      }
    }
  }
}

/**
 * Exercise 3: Creating new form elements with #ajax
 */
function _forms_training_form_3(&$form, &$form_state){
  $form['instructions']['#markup'] = '<div><p>Instructions:</p>'.
    '<p>Create the following form and assign an ajax callback to the submit button so we can create another button</p>';
  if (isset($form_state['count'])) {
    $count = $form_state['count'];
  }
  else {
    $count = 1;
  }
  $form['count'] = array(
    '#type' => 'value',
    '#value' => $count
  );
  $form['exercise_3'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div id="textfield-set">',
    '#suffix' => '</div>'
  );
  for($i = 0; $i < $count; $i++){
    $form['exercise_3']['field_'.$i] = array(
      '#type' => 'textfield',
      '#title' => 'Enter an item name'
    );
  }
  $form['add_another'] = array(
    '#type' => 'submit',
    '#value' => t('Add more'),
    '#attributes' => array(
      'title' => t("If the amount of boxes above isn't enough, click here to add more."),
    ),
    '#submit' => array('_forms_training_exercise_3_submit'),
    '#ajax' => array(
      'callback' => '_forms_training_exercise_3_js',
      'wrapper' => 'textfield-set',
      'effect' => 'fade',
    ),
    '#suffix' => '<br />'
  );
}

/**
 * Exercise 3: Submit handler for add more
 */
function _forms_training_exercise_3_submit($form, &$form_state){
  $form_state['count'] = (!empty($form_state['count'])?$form_state['count']:1) + 1;
  $form_state['rebuild'] = TRUE;
}

/**
 * Exercise 3: Returns the form element to be rendered via ajax
 */
function _forms_training_exercise_3_js($form, &$form_state){
  return $form['exercise_3'];
}

/**
 * Exercise 4: Altering form elements with #ajax
 */
function _forms_training_form_4(&$form, &$form_state){
  $form['instructions']['#markup'] = '<div><p>Instructions:</p>'.
    '<p>The objective now is to create two dropdown inputs. The first (like the one showing below) should have the following categories (or whatever categories you can come up with):</p>'.
    '<p>'.theme('item_list', array('Colors', 'Fruits', 'Vehicles')).'</p>'.
    '<p>The second dropdown should display items within the category selected. For example, if selected category is Fruits, the second dropdown should display something like: Apple, Banana, Orange, Grapes, etc</p>'.
    '<p>Try the following form to show you how this should be working.</p>';
  $category = !empty($form_state['values']['exercise_4_dropdown_1'])?$form_state['values']['exercise_4_dropdown_1']:'';
  $form['exercise_4_dropdown_1'] = array(
    '#type' => 'select',
    '#title' => 'Category',
    '#options' => array(
      '' => '- Select a category -', 
      'colors' => 'Colors', 
      'fruits' => 'Fruits', 
      'vehicles' => 'Vehicles'),
    '#default_value' => $category,
    '#ajax' => array(
      'callback' => '_forms_training_exercise_4_js',
      'wrapper' => 'category-items-wrapper',
      'effect' => 'fade',
    ),
  );
  switch($category){
    case 'colors':
      $category_items = array('blue', 'red', 'yellow');
      break;
    case 'fruits':
      $category_items = array('apple', 'banana', 'kiwi');
      break;
    case 'vehicles':
      $category_items = array('car', 'plane', 'boat');
      break;
    case '':
      $category_items = array('' => '- select a category first -');
  }
  $form['exercise_4_dropdown_2'] = array(
    '#prefix' => '<div id="category-items-wrapper">',
    '#suffix' => '</div>',
    '#type' => 'select',
    '#title' => 'Category Items',
    '#disabled' => !empty($category_items[''])?TRUE:FALSE,
    '#options' => $category_items
  );
}

/**
 * Exercise 4: Ajax callback returning updated form element
 */
function _forms_training_exercise_4_js($form, &$form_state){
  return $form['exercise_4_dropdown_2'];
}

/**
 * Exercise 5: Creting new form element types
 */
function _forms_training_form_5(&$form, &$form_state){
  $form['instructions']['#markup'] = '<div><p>Instructions:</p>'.
    '<p>In this exercise you will create a new form element type. For this exercise you will need to implement some hooks in the forms_training.hooks.inc file</p>';
  
}

/**
 * Exercise 6: Ajax
 */
function _forms_training_form_6(&$form, &$form_state){
  $form['instructions']['#markup'] = '<div><p>Instructions:</p>'.
    '<p>Create the following form and assign an ajax callback to the submit button so we can create another button</p>';
}

/**
 * Exercise 7: Ajax
 */
function _forms_training_form_7(&$form, &$form_state){
  $form['instructions']['#markup'] = '<div><p>Instructions:</p>'.
    '<p>Create the following form and assign an ajax callback to the submit button so we can create another button</p>';
}

/**
 * Exercise 8: Ajax
 */
function _forms_training_form_8(&$form, &$form_state){
  $form['instructions']['#markup'] = '<div><p>Instructions:</p>'.
    '<p>Create the following form and assign an ajax callback to the submit button so we can create another button</p>';
}

/**
 * Exercise 9: Ajax
 */
function _forms_training_form_9(&$form, &$form_state){
  $form['instructions']['#markup'] = '<div><p>Instructions:</p>'.
    '<p>Create the following form and assign an ajax callback to the submit button so we can create another button</p>';
}

